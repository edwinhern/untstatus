import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./stripe.service";
export class StripeElementsService {
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    paymentRequest(stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    }
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return {
                ...(options || {}),
                classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                }
            };
        }
        return options || {};
    }
}
StripeElementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeElementsService, deps: [{ token: i1.StripeService }], target: i0.ɵɵFactoryTarget.Injectable });
StripeElementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeElementsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeElementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StripeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBc0IzQyxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUVwRCxRQUFRLENBQ04sTUFBTSxFQUNOLFVBQWlDLEVBQUU7UUFFbkMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFNLEVBQ04sT0FBOEI7UUFFOUIsT0FBTyxNQUFNO1lBQ1gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBc0NELFlBQVksQ0FBQyxPQUFPLEVBQUUsY0FBc0I7UUFDMUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkQsT0FBTyxPQUFPLElBQUksRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDaEMsT0FBTztnQkFDTCxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxjQUFjO29CQUNwQixRQUFRLEVBQUUsR0FBRyxjQUFjLFlBQVk7b0JBQ3ZDLEtBQUssRUFBRSxHQUFHLGNBQWMsU0FBUztvQkFDakMsS0FBSyxFQUFFLEdBQUcsY0FBYyxTQUFTO29CQUNqQyxPQUFPLEVBQUUsR0FBRyxjQUFjLFdBQVc7b0JBQ3JDLGNBQWMsRUFBRSxHQUFHLGNBQWMsbUJBQW1CO2lCQUNyRDthQUNGLENBQUM7U0FDSDtRQUVELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOztrSEFyRlUscUJBQXFCO3NIQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgUGF5bWVudFJlcXVlc3QsXG4gIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZVBheW1lbnRFbGVtZW50T3B0aW9uc1xufSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3N0cmlwZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUVsZW1lbnRzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyaXBlU2VydmljZTogU3RyaXBlU2VydmljZSkge31cblxuICBlbGVtZW50cyhcbiAgICBzdHJpcGUsXG4gICAgb3B0aW9uczogU3RyaXBlRWxlbWVudHNPcHRpb25zID0ge31cbiAgKTogT2JzZXJ2YWJsZTxTdHJpcGVFbGVtZW50cz4ge1xuICAgIGlmIChzdHJpcGUpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBzdHJpcGUuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgcGF5bWVudFJlcXVlc3QoXG4gICAgc3RyaXBlLFxuICAgIG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9uc1xuICApOiBQYXltZW50UmVxdWVzdCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHN0cmlwZVxuICAgICAgPyBzdHJpcGUucGF5bWVudFJlcXVlc3Qob3B0aW9ucylcbiAgICAgIDogdGhpcy5zdHJpcGVTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpO1xuICB9XG5cbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZVBheW1lbnRFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZVBheW1lbnRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWNvbnRhaW5lckNsYXNzIHx8IChvcHRpb25zICYmIG9wdGlvbnMuY2xhc3NlcykpIHtcbiAgICAgIHJldHVybiBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5jbGFzc2VzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi4ob3B0aW9ucyB8fCB7fSksXG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICBiYXNlOiBjb250YWluZXJDbGFzcyxcbiAgICAgICAgICBjb21wbGV0ZTogYCR7Y29udGFpbmVyQ2xhc3N9LS1jb21wbGV0ZWAsXG4gICAgICAgICAgZW1wdHk6IGAke2NvbnRhaW5lckNsYXNzfS0tZW1wdHlgLFxuICAgICAgICAgIGZvY3VzOiBgJHtjb250YWluZXJDbGFzc30tLWZvY3VzYCxcbiAgICAgICAgICBpbnZhbGlkOiBgJHtjb250YWluZXJDbGFzc30tLWludmFsaWRgLFxuICAgICAgICAgIHdlYmtpdEF1dG9GaWxsOiBgJHtjb250YWluZXJDbGFzc30tLXdlYmtpdC1hdXRvRmlsbGBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgfVxufVxuIl19