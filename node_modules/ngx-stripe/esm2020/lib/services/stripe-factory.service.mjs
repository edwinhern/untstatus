import { Inject, Injectable } from '@angular/core';
import { NGX_STRIPE_VERSION, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { StripeInstance } from './stripe-instance.class';
import * as i0 from "@angular/core";
import * as i1 from "./api-loader.service";
import * as i2 from "./window-ref.service";
export class StripeFactoryService {
    constructor(version, baseKey, baseOptions, loader, window) {
        this.version = version;
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    create(key, options) {
        if (!key && !this.baseKey) {
            return null;
        }
        return new StripeInstance(this.version, this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
}
StripeFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeFactoryService, deps: [{ token: NGX_STRIPE_VERSION }, { token: STRIPE_PUBLISHABLE_KEY }, { token: STRIPE_OPTIONS }, { token: i1.LazyStripeAPILoader }, { token: i2.WindowRef }], target: i0.ɵɵFactoryTarget.Injectable });
StripeFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeFactoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripeFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_STRIPE_VERSION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_PUBLISHABLE_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_OPTIONS]
                }] }, { type: i1.LazyStripeAPILoader }, { type: i2.WindowRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9zZXJ2aWNlcy9zdHJpcGUtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsY0FBYyxFQUNkLHNCQUFzQixFQUN2QixNQUFNLG9DQUFvQyxDQUFDO0FBSzVDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQUd6RCxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFlBQ3FDLE9BQWUsRUFDWCxPQUFlLEVBQ3ZCLFdBQXFDLEVBQzdELE1BQTJCLEVBQzNCLE1BQWlCO1FBSlcsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNYLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDdkIsZ0JBQVcsR0FBWCxXQUFXLENBQTBCO1FBQzdELFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQzNCLFdBQU0sR0FBTixNQUFNLENBQVc7SUFDdkIsQ0FBQztJQUVHLE1BQU0sQ0FDWCxHQUFZLEVBQ1osT0FBa0M7UUFFbEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxjQUFjLENBQ3ZCLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsTUFBTSxFQUNYLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUNuQixPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FDNUIsQ0FBQztJQUNKLENBQUM7O2lIQXhCVSxvQkFBb0Isa0JBRXJCLGtCQUFrQixhQUNsQixzQkFBc0IsYUFDdEIsY0FBYztxSEFKYixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVTs7MEJBR04sTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUN6QixNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLE1BQU07MkJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMgfSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7XG4gIE5HWF9TVFJJUEVfVkVSU0lPTixcbiAgU1RSSVBFX09QVElPTlMsXG4gIFNUUklQRV9QVUJMSVNIQUJMRV9LRVlcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9uZ3gtc3RyaXBlLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IExhenlTdHJpcGVBUElMb2FkZXIgfSBmcm9tICcuL2FwaS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuL3dpbmRvdy1yZWYuc2VydmljZSc7XG5cbmltcG9ydCB7IFN0cmlwZUluc3RhbmNlIH0gZnJvbSAnLi9zdHJpcGUtaW5zdGFuY2UuY2xhc3MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RyaXBlRmFjdG9yeVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5HWF9TVFJJUEVfVkVSU0lPTikgcHVibGljIHZlcnNpb246IHN0cmluZyxcbiAgICBASW5qZWN0KFNUUklQRV9QVUJMSVNIQUJMRV9LRVkpIHB1YmxpYyBiYXNlS2V5OiBzdHJpbmcsXG4gICAgQEluamVjdChTVFJJUEVfT1BUSU9OUykgcHVibGljIGJhc2VPcHRpb25zOiBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMsXG4gICAgcHVibGljIGxvYWRlcjogTGF6eVN0cmlwZUFQSUxvYWRlcixcbiAgICBwdWJsaWMgd2luZG93OiBXaW5kb3dSZWZcbiAgKSB7fVxuXG4gIHB1YmxpYyBjcmVhdGUoXG4gICAga2V5Pzogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnNcbiAgKTogU3RyaXBlSW5zdGFuY2Uge1xuICAgIGlmICgha2V5ICYmICF0aGlzLmJhc2VLZXkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3RyaXBlSW5zdGFuY2UoXG4gICAgICB0aGlzLnZlcnNpb24sXG4gICAgICB0aGlzLmxvYWRlcixcbiAgICAgIHRoaXMud2luZG93LFxuICAgICAga2V5IHx8IHRoaXMuYmFzZUtleSxcbiAgICAgIG9wdGlvbnMgfHwgdGhpcy5iYXNlT3B0aW9uc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==