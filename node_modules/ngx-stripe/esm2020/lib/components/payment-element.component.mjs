import { Component, Input, ViewChild, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
export class StripePaymentElementComponent {
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.doNotCreateUntilClientSecretIsSet = false;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.state = 'notready';
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        let updateElements = false;
        if (changes.elementsOptions || changes.stripe || changes.clientSecret || changes.appearance || !this.elements) {
            this.elements = await this.stripeElementsService
                .elements(this.stripe, {
                ...(this.elementsOptions || {}),
                ...(this.appearance ? { appearance: this.appearance } : {}),
                ...(this.clientSecret ? { clientSecret: this.clientSecret } : {})
            })
                .toPromise();
            updateElements = true;
        }
        if (changes.options ||
            changes.containerClass ||
            !this.element ||
            updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
        this.state = 'ready';
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
    }
    update(options) {
        return this.element.update(options);
    }
    collapse() {
        return this.element.collapse();
    }
    createElement(options = {}) {
        try {
            this.element = this.elements.create('payment', options);
        }
        catch (err) {
            this.elements = null;
            throw err;
        }
        this.element.on('change', (ev) => this.change.emit(ev));
        this.element.on('blur', () => this.blur.emit());
        this.element.on('focus', () => this.focus.emit());
        this.element.on('ready', () => this.ready.emit());
        this.element.on('escape', () => this.escape.emit());
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripePaymentElementComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripePaymentElementComponent, deps: [{ token: i1.StripeElementsService }], target: i0.ɵɵFactoryTarget.Component });
StripePaymentElementComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: StripePaymentElementComponent, selector: "ngx-stripe-payment", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe", appearance: "appearance", clientSecret: "clientSecret", doNotCreateUntilClientSecretIsSet: "doNotCreateUntilClientSecretIsSet" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape" }, viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="field" #stripeElementRef></div>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StripePaymentElementComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-payment',
                    template: `<div class="field" #stripeElementRef></div>`
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }]; }, propDecorators: { stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], appearance: [{
                type: Input
            }], clientSecret: [{
                type: Input
            }], doNotCreateUntilClientSecretIsSet: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,