import { ElementRef, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy, TemplateRef } from '@angular/core';
import { StripeElementsOptions, StripeCardElementOptions, StripeCardElement, StripeElements, StripeCardElementChangeEvent } from '@stripe/stripe-js';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import { StripeInstance } from '../services/stripe-instance.class';
import { StripeElementsService } from '../services/stripe-elements.service';
import * as i0 from "@angular/core";
export declare class StripeCardComponent implements OnInit, OnChanges, OnDestroy {
    stripeElementsService: StripeElementsService;
    loadingTemplate?: TemplateRef<NgxStripeElementLoadingTemplateDirective>;
    stripeElementRef: ElementRef;
    element: StripeCardElement;
    containerClass: string;
    options: Partial<StripeCardElementOptions>;
    elementsOptions: Partial<StripeElementsOptions>;
    stripe: StripeInstance;
    load: EventEmitter<StripeCardElement>;
    blur: EventEmitter<void>;
    change: EventEmitter<StripeCardElementChangeEvent>;
    focus: EventEmitter<void>;
    ready: EventEmitter<void>;
    escape: EventEmitter<void>;
    elements: StripeElements;
    state: 'notready' | 'starting' | 'ready';
    constructor(stripeElementsService: StripeElementsService);
    ngOnChanges(changes: SimpleChanges): Promise<void>;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    update(options: Partial<StripeCardElementOptions>): void;
    /**
     * @deprecated
     */
    getCard(): StripeCardElement;
    private createElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<StripeCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StripeCardComponent, "ngx-stripe-card", never, { "containerClass": "containerClass"; "options": "options"; "elementsOptions": "elementsOptions"; "stripe": "stripe"; }, { "load": "load"; "blur": "blur"; "change": "change"; "focus": "focus"; "ready": "ready"; "escape": "escape"; }, ["loadingTemplate"], never>;
}
